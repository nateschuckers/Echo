/**
 * Individual Profile Page Script
 * * This script builds and manages the entire individual account profile page.
 * It follows a more robust, self-contained component model:
 * - No HTML <template> tags are used to avoid race conditions.
 * - HTML for each tab is generated by dedicated JavaScript functions.
 * - A central App object manages state, data, and rendering.
 * This ensures reliability and prevents issues where the script runs before the DOM is ready.
 */
const App = {
    // --- STATE & CONFIGURATION ---
    state: {
        currentAccount: null,
        activeTab: 'profile',
        isDarkMode: false,
    },
    elements: {
        root: document.getElementById('individual-profile-root'),
    },
    charts: {
        givingHistory: null,
        designation: null,
    },

    // --- MOCK DATA ---
    mockData: {
        "Alex Doe": {
            id: 1, name: 'Alex Doe', jobTitle: 'Product Manager', employer: 'Tech Solutions Inc.', informalName: 'Alex', formalName: 'Mr. Doe',
            email: 'alex.doe@example.com', phone: '555-123-4567', address: '123 Main St, Anytown, CA 12345',
            interests: ['Environmental Causes', 'Youth Education', 'Arts & Culture', 'Community Development'],
            userDefined: { 'Spouse Name': 'Jamie Doe', 'Referred By': 'Jane Smith' },
            details: { 'Contact Roles': 'Board Member, Major Donor, Volunteer', 'Gender': 'Non-binary', 'Ethnicity': 'Not Specified', 'Correspondence': 'Email', 'Birthday': '10/22/1985', 'Anniversary': '06/12/2010' },
            relationships: [
                { name: 'Tech Solutions Inc.', type: 'Primary Contact', icon: 'fa-solid fa-building', color: 'text-blue-500' },
                { name: 'Anytown Community Foundation', type: 'Board Member', icon: 'fa-solid fa-users', color: 'text-green-500' }
            ],
            transactions: [
                { 
                    id: 1, 
                    campaign: '2025 Campaign', 
                    amount: 1250.00, 
                    paid: 250.00, 
                    date: '2025-08-28', 
                    designations: [{agency: 'RUM', amount: 1000}, {agency: 'Anytown Food Bank', amount: 250}], 
                    recurring: {frequency: 'Monthly', amount: 100, remaining: 10},
                    details: {
                        'Solicitor': 'Jane Smith (Dev)', 'Soft Credit': 'Jamie Doe', 'Pledge Type': 'Individual',
                        'Source': 'Online Form', 'Batch Number': 'WEB-2025-08-28', 'Date Received': '2025-08-28',
                    },
                    payments: [
                        { id: 'ipay-001', date: '2025-08-28', amount: 250.00, method: 'Credit Card', reference: 'ch_12345ABC', processedBy: 'System' }
                    ],
                    adjustments: [],
                    documents: [
                        { id: 'doc-i1', name: 'Pledge Confirmation 2025.pdf', content: 'This is the content of the pledge confirmation for Alex Doe.' },
                        { id: 'doc-i2', name: 'Receipt 08-28-2025.pdf', content: 'This is the receipt for the $250 payment.' }
                    ],
                    auditLog: [
                        { user: 'Alex Doe', action: 'Pledge Created', date: '2025-08-28', icon: 'fa-plus', color: 'bg-blue-500' },
                        { user: 'System', action: 'Payment of $250.00 Received', date: '2025-08-28', icon: 'fa-credit-card', color: 'bg-green-500' }
                    ] 
                },
                { 
                    id: 2, 
                    campaign: '2024 Campaign', 
                    amount: 1000.00, 
                    paid: 1000.00, 
                    date: '2024-08-25', 
                    designations: [{agency: 'RUM', amount: 1000}], 
                    recurring: null,
                    details: { 'Solicitor': 'Jane Smith (Dev)', 'Pledge Type': 'Individual', 'Source': 'Gala Event' },
                    payments: [ { id: 'ipay-002', date: '2024-08-25', amount: 1000.00, method: 'Check', reference: '1052', processedBy: 'Jane Smith (Dev)' } ],
                    adjustments: [],
                    documents: [],
                    auditLog: [
                        { user: 'Alex Doe', action: 'Pledge Created', date: '2024-08-25', icon: 'fa-plus', color: 'bg-blue-500' },
                        { user: 'System', action: 'Payment of $1000.00 Received', date: '2024-08-25', icon: 'fa-credit-card', color: 'bg-green-500' }
                    ]
                },
            ],
            campaignSummary: [
                { campaign: '2025 Campaign', pledge: 1250.00, paid: 250.00, balance: 1000.00, designations: 2 },
                { campaign: '2024 Campaign', pledge: 1000.00, paid: 1000.00, balance: 0.00, designations: 1 },
                { campaign: '2023 Campaign', pledge: 800.00, paid: 800.00, balance: 0.00, designations: 1 },
            ],
            engagements: {
                events: [ { eventName: 'Annual Charity Gala', date: '2025-08-15', status: 'Attended' }, { eventName: 'Volunteer Appreciation Night', date: '2024-11-20', status: 'Attended' } ],
                volunteering: [ { opportunityName: 'Community Center Painting', agency: 'Community Shelter', date: '2025-06-05', status: 'Completed', hours: 6 }, { opportunityName: 'Reading Program Tutor', agency: 'Anytown Library', date: '2024-10-15', status: 'Completed', hours: 8 } ]
            },
            communications: {
                logs: [ { id: 1, type: 'Email', subject: 'Follow-up on Gala', sender: 'Jane Smith (Dev)', date: '2025-08-22', content: 'Hi Alex, it was great to connect at the gala. I\'ve attached the proposal we discussed. Let me know your thoughts!' } ],
                notes: [ { id: 1, title: 'Connection to Board Member', date: '2025-04-02', content: 'Alex Doe is good friends with Jane Smith on our board.' } ],
                documents: [ { id: 1, name: 'Sponsorship Proposal 2025.pdf', type: 'pdf', date: '2025-08-22' } ]
            }
        },
        "Jane Smith": {
            id: 3, name: 'Jane Smith', jobTitle: 'CEO', employer: 'Innovate Corp', informalName: 'Jane', formalName: 'Ms. Smith',
            email: 'jane.smith@innovate.corp', phone: '555-888-9999', address: '456 Innovation Dr, Techville, CA 90210',
            interests: ['Leadership Development', 'Women in Tech', 'Corporate Philanthropy'],
            userDefined: { 'Assistant Name': 'Mark Johnson', 'Alma Mater': 'State University' },
            details: { 'Contact Roles': 'Major Donor, Volunteer', 'Gender': 'Female', 'Ethnicity': 'Caucasian', 'Correspondence': 'Email', 'Birthday': '03/15/1980', 'Anniversary': '07/20/2005' },
            relationships: [
                { name: 'Innovate Corp', type: 'CEO', icon: 'fa-solid fa-building', color: 'text-blue-500' },
                { name: 'Techville Chamber of Commerce', type: 'Board Member', icon: 'fa-solid fa-landmark', color: 'text-amber-500' }
            ],
            transactions: [
                { id: 3, campaign: '2025 Campaign', amount: 5000.00, paid: 5000.00, date: '2025-02-10', designations: [{agency: 'Women in Tech Foundation', amount: 5000}], recurring: null, documents: [], auditLog: [], details: {}, payments: [], adjustments: [] },
                { id: 4, campaign: '2024 Campaign', amount: 4500.00, paid: 4500.00, date: '2024-02-15', designations: [{agency: 'Women in Tech Foundation', amount: 4500}], recurring: null, documents: [], auditLog: [], details: {}, payments: [], adjustments: [] }
            ],
            campaignSummary: [],
            engagements: {
                events: [ { eventName: 'Women in Tech Conference', date: '2025-05-20', status: 'Attended' } ],
                volunteering: [ { opportunityName: 'Mentorship Program', agency: 'Girls Who Code', date: '2025-09-01', status: 'Scheduled', hours: 10 } ]
            },
            communications: {
                logs: [ { id: 2, type: 'Meeting', subject: 'Annual Giving Strategy', sender: 'John Davis (Dev)', date: '2025-01-15', content: 'Met with Jane to discuss Innovate Corp\'s strategy for the upcoming campaign.' } ],
                notes: [ { id: 2, title: 'Keynote Speaker', date: '2025-05-21', content: 'Jane was the keynote speaker at the WIT conference. Great potential for a larger partnership.' } ],
                documents: []
            }
        },
        "John Davis": {
            id: 5, name: 'John Davis', jobTitle: 'Freelance Developer', employer: 'Self-Employed', informalName: 'John', formalName: 'Mr. Davis',
            email: 'john.davis@email.com', phone: '555-111-2222', address: '789 Freelancer Way, Workville, NY 10001',
            interests: ['Open Source Software', 'Community Volunteering'],
            userDefined: { 'Preferred Contact': 'Email' },
            details: { 'Contact Roles': 'Volunteer', 'Gender': 'Male', 'Ethnicity': 'Hispanic', 'Correspondence': 'Email', 'Birthday': '07/11/1992', 'Anniversary': null },
            relationships: [
                { name: 'Local Soup Kitchen', type: 'Volunteer', icon: 'fa-solid fa-heart', color: 'text-red-500' }
            ],
            transactions: [
                { id: 5, campaign: '2025 Campaign', amount: 250.00, paid: 250.00, date: '2025-09-01', designations: [{agency: 'RUM', amount: 250}], recurring: null, documents: [], auditLog: [], details: {}, payments: [], adjustments: [] },
                { id: 6, campaign: '2024 Campaign', amount: 200.00, paid: 200.00, date: '2024-09-05', designations: [{agency: 'RUM', amount: 200}], recurring: null, documents: [], auditLog: [], details: {}, payments: [], adjustments: [] }
            ],
            campaignSummary: [],
            engagements: {
                events: [ { eventName: 'Volunteer Appreciation Night', date: '2024-11-20', status: 'Attended' } ],
                volunteering: [ { opportunityName: 'Food Bank Sorting', agency: 'Anytown Food Bank', date: '2025-08-18', status: 'Completed', hours: 4 } ]
            },
            communications: {
                logs: [ { id: 3, type: 'Email', subject: 'Volunteer Shift Confirmation', sender: 'Volunteer Coordinator', date: '2025-08-15', content: 'Hi John, confirming your shift for Monday. Thanks for your help!' } ],
                notes: [],
                documents: []
            }
        }
    },

    // --- INITIALIZATION ---
    init() {
        this.applyTheme();
        this.fetchData();

        if (!this.state.currentAccount) {
            this.renderError("Account data could not be loaded.");
            return;
        }

        this.renderLayout();
        this.addEventListeners();
    },

    // --- DATA & THEME ---
    fetchData() {
        const accountName = sessionStorage.getItem('currentAccountName') || "Alex Doe";
        this.state.currentAccount = this.mockData[accountName];
    },
    
    applyTheme() {
        const savedTheme = window.parent.localStorage.getItem('andar-theme') || 'theme-blue';
        const savedMode = window.parent.localStorage.getItem('andar-mode') || 'light';
        document.documentElement.className = savedMode;
        document.body.classList.add(savedTheme);
        this.state.isDarkMode = savedMode === 'dark';
    },

    // --- RENDERING ---
    renderLayout() {
        if (!this.elements.root) return;
        const tabs = [
            { id: 'profile', label: 'Profile' },
            { id: 'transactions', label: 'Transactions' },
            { id: 'campaign', label: 'Campaign' },
            { id: 'engagements', label: 'Engagements' },
            { id: 'communications', label: 'Communications' },
        ];

        let tabsHtml = tabs.map(tab => {
            const isActive = tab.id === this.state.activeTab;
            const activeClasses = 'border-primary text-primary';
            const inactiveClasses = 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300';
            return `<a href="#${tab.id}" data-tab-id="${tab.id}" class="profile-tab whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${isActive ? activeClasses : inactiveClasses}">${tab.label}</a>`;
        }).join('');

        this.elements.root.innerHTML = `
            <div>
                <div class="border-b border-gray-200 dark:border-gray-700 mb-6">
                    <nav id="profile-tabs" class="-mb-px flex space-x-8 overflow-x-auto" aria-label="Tabs">
                        ${tabsHtml}
                    </nav>
                </div>
                <div id="profile-tab-content-container">
                    <!-- Tab content will be rendered here -->
                </div>
            </div>
        `;
        this.renderTabContent();
    },

    renderTabContent() {
        const container = this.elements.root.querySelector('#profile-tab-content-container');
        if (!container) return;

        if (this.charts.givingHistory) this.charts.givingHistory.destroy();
        if (this.charts.designation) this.charts.designation.destroy();
        
        const tabId = this.state.activeTab;
        const data = this.state.currentAccount;
        let contentHtml = '';

        switch (tabId) {
            case 'profile':         contentHtml = this.createProfileTabHTML(data); break;
            case 'transactions':    contentHtml = this.createTransactionsTabHTML(data); break;
            case 'campaign':        contentHtml = this.createCampaignTabHTML(data); break;
            case 'engagements':     contentHtml = this.createEngagementsTabHTML(data); break;
            case 'communications':  contentHtml = this.createCommunicationsTabHTML(data); break;
            default:                contentHtml = `<p>Unknown tab selected.</p>`;
        }

        container.innerHTML = contentHtml;
        
        if (tabId === 'campaign') {
            this.initGivingChart(container.querySelector('#giving-history-chart'));
            this.initDesignationChart(container.querySelector('#designation-chart'));
        }
    },

    renderError(message) {
        this.elements.root.innerHTML = `<div class="text-center p-8"><h2 class="text-xl font-semibold">Error</h2><p class="text-gray-500">${message}</p></div>`;
    },

    // --- HELPER FUNCTION TO CREATE MODAL ---
    createDetailsModalHtml(data) {
        const formatCurrency = (amount) => (amount != null ? amount : 0).toLocaleString('en-US', { style: 'currency', currency: 'USD' });
        
        const detailsHtml = Object.entries(data.details || {}).map(([key, value]) => `
            <div class="py-2 sm:grid sm:grid-cols-3 sm:gap-4">
                <dt class="text-sm font-medium text-gray-500 dark:text-gray-400">${key}</dt>
                <dd class="mt-1 text-sm text-gray-900 dark:text-white sm:mt-0 sm:col-span-2">${value || 'N/A'}</dd>
            </div>
        `).join('');

        const paymentsHtml = (data.payments || []).length > 0 ? (data.payments || []).map(p => `
            <tr>
                <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${new Date(p.date).toLocaleDateString()}</td>
                <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${p.method}</td>
                <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${p.reference || 'N/A'}</td>
                <td class="px-2 py-2 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white text-right">${formatCurrency(p.amount)}</td>
            </tr>
        `).join('') : `<tr><td colspan="4" class="text-center py-4 text-sm text-gray-500">No payments found.</td></tr>`;

        const adjustmentsHtml = (data.adjustments || []).length > 0 ? (data.adjustments || []).map(a => `
            <tr>
                <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${new Date(a.date).toLocaleDateString()}</td>
                <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${a.reason}</td>
                <td class="px-2 py-2 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">${a.adjustedBy}</td>
                <td class="px-2 py-2 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white text-right">${formatCurrency(a.amount)}</td>
            </tr>
        `).join('') : `<tr><td colspan="4" class="text-center py-4 text-sm text-gray-500">No adjustments found.</td></tr>`;

        return `
            <div class="space-y-6 text-left">
                <div>
                    <h4 class="text-base font-semibold mb-2 text-gray-800 dark:text-gray-200">Pledge Details</h4>
                    <dl class="divide-y divide-gray-200 dark:divide-gray-700">${detailsHtml}</dl>
                </div>
                <div>
                    <h4 class="text-base font-semibold mb-2 text-gray-800 dark:text-gray-200">Payments</h4>
                    <div class="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
                        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                            <thead class="bg-gray-50 dark:bg-gray-700/50">
                                <tr>
                                    <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Date</th>
                                    <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Method</th>
                                    <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Reference</th>
                                    <th class="px-2 py-2 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Amount</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">${paymentsHtml}</tbody>
                        </table>
                    </div>
                </div>
                <div>
                    <h4 class="text-base font-semibold mb-2 text-gray-800 dark:text-gray-200">Adjustments</h4>
                     <div class="overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-700">
                        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                            <thead class="bg-gray-50 dark:bg-gray-700/50">
                                <tr>
                                    <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Date</th>
                                    <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Reason</th>
                                    <th class="px-2 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Adjusted By</th>
                                    <th class="px-2 py-2 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Amount</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">${adjustmentsHtml}</tbody>
                        </table>
                    </div>
                </div>
            </div>
        `;
    },

    // --- HTML GENERATOR FUNCTIONS ---
    createProfileTabHTML(data) {
        const contactHtml = `
            <div class="flex items-center space-x-3"><svg class="w-5 h-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" /></svg><span>${data.email}</span></div>
            <div class="flex items-center space-x-3"><svg class="w-5 h-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M2.25 6.75c0 8.284 6.716 15 15 15h2.25a2.25 2.25 0 002.25-2.25v-1.372c0-.516-.351-.966-.852-1.091l-4.423-1.106c-.44-.11-.902.055-1.173.417l-.97 1.293c-.282.376-.769.542-1.21.38a12.035 12.035 0 01-7.143-7.143c-.162-.441.004-.928.38-1.21l1.293-.97c.363-.271.527-.734.417-1.173L6.963 3.102a1.125 1.125 0 00-1.091-.852H4.5A2.25 2.25 0 002.25 4.5v2.25z" /></svg><span>${data.phone}</span></div>
            <div class="flex items-center space-x-3"><svg class="w-5 h-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" /><path stroke-linecap="round" stroke-linejoin="round" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" /></svg><span>${data.address}</span></div>`;
        const interestsHtml = data.interests.map(interest => `<span class="bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-sm font-medium px-3 py-1 rounded-full">${interest}</span>`).join('');
        const userDefinedHtml = Object.entries(data.userDefined).map(([key, value]) => `<div><p class="text-sm text-gray-500">${key}</p><p>${value}</p></div>`).join('');
        const detailsHtml = Object.entries(data.details).map(([key, value]) => `<div><p class="text-sm text-gray-500">${key}</p><p>${value ? value : 'N/A'}</p></div>`).join('');
        const relationshipsHtml = data.relationships.map(rel => `<div class="flex items-center space-x-3"><div class="relationship-icon w-10 h-10 flex-shrink-0 flex items-center justify-center rounded-full bg-gray-100 dark:bg-gray-700"><i class="${rel.icon} ${rel.color} fa-lg"></i></div><div><p class="font-semibold">${rel.name}</p><p class="text-sm text-gray-500">${rel.type}</p></div></div>`).join('');

        return `
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div class="lg:col-span-1 space-y-6">
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 text-center">
                        <div class="w-24 h-24 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-4xl font-bold mx-auto mb-4">${data.name.split(' ').map(n=>n[0]).join('').substring(0,2).toUpperCase()}</div>
                        <h2 class="text-2xl font-bold">${data.name}</h2>
                        <p class="text-gray-500 dark:text-gray-400">${data.jobTitle} at ${data.employer}</p>
                        <p class="text-sm text-gray-400 dark:text-gray-500">Informal: ${data.informalName} | Formal: ${data.formalName}</p>
                    </div>
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Contact Information</h3><div class="space-y-4">${contactHtml}</div></div>
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Interests</h3><div class="flex flex-wrap gap-2">${interestsHtml}</div></div>
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">User Defined</h3><div class="grid grid-cols-2 gap-4">${userDefinedHtml}</div></div>
                </div>
                <div class="lg:col-span-2 space-y-6">
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Details & Demographics</h3><div class="grid grid-cols-2 gap-4">${detailsHtml}</div></div>
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Relationships</h3><div class="grid grid-cols-1 md:grid-cols-2 gap-4">${relationshipsHtml}</div></div>
                </div>
            </div>`;
    },

    createTransactionsTabHTML(data) {
        const formatCurrency = (amount) => (amount || 0).toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 });
        const transactions = data.transactions || [];
        
        const lifetime = transactions.reduce((sum, t) => sum + t.amount, 0);
        const lastGift = transactions.length > 0 ? transactions[0].amount : 0;
        const largestGift = transactions.reduce((max, t) => Math.max(max, t.amount), 0);
        const firstYear = transactions.length > 0 ? new Date(transactions[transactions.length - 1].date).getFullYear() : '-';

        let transactionsHtml = transactions.map(trx => {
            const progress = trx.amount > 0 ? (trx.paid / trx.amount) * 100 : 0;
            const pledgeDetailsForModal = JSON.stringify(trx);

            const documentsHtml = (trx.documents || []).map(doc => `
                <a href="#" class="transaction-document-link text-primary hover:underline flex items-center text-sm" data-doc-id="${doc.id}" data-doc-title="View Document: ${doc.name}" data-doc-content="${doc.content}">
                    <i class="fa-solid fa-file-pdf mr-2"></i>${doc.name}
                </a>
            `).join('');

            const auditLogHtml = (trx.auditLog || []).map(log => `
                <div class="timeline-item">
                    <div class="timeline-icon ${log.color} text-white">
                        <i class="fa-solid ${log.icon}"></i>
                    </div>
                    <div class="timeline-content">
                        <p class="font-semibold text-sm">${log.action}</p>
                        <p class="text-xs text-gray-500 dark:text-gray-400">By ${log.user} on ${new Date(log.date).toLocaleDateString()}</p>
                    </div>
                </div>
            `).join('');

            return `
            <div data-transaction-card class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                <div class="pledge-details-data hidden">${pledgeDetailsForModal}</div>
                <div class="p-4">
                    <div class="pledge-card-header">
                        <div class="pledge-card-info">
                            <p class="text-sm text-gray-500 dark:text-gray-400">${new Date(trx.date).toLocaleDateString()}</p>
                            <p class="text-md font-semibold">${trx.campaign}</p>
                            <p class="text-2xl font-bold mt-1">${formatCurrency(trx.amount)}</p>
                        </div>
                        <div class="pledge-card-actions">
                            ${trx.designations.length > 0 ? `<button class="designated-button pledge-tag"><i class="fa-solid fa-flag text-primary"></i> Designated</button>` : ''}
                            ${trx.recurring ? `<button class="recurring-button pledge-tag"><i class="fa-solid fa-arrows-rotate text-green-500"></i> Recurring</button>` : ''}
                        </div>
                    </div>
                    <div class="mt-4">
                        <div class="flex justify-between items-center mb-1"><span class="text-sm font-medium">${formatCurrency(trx.paid)} paid</span><span class="text-sm font-bold">${Math.round(progress)}%</span></div>
                        <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2.5"><div class="h-2.5 rounded-full bg-primary" style="width: ${progress}%;"></div></div>
                    </div>
                    <div class="designation-details hidden">${trx.designations.map(d => `<p>${d.agency}: ${formatCurrency(d.amount)}</p>`).join('')}</div>
                    ${trx.recurring ? `<div class="recurring-details hidden"><p>Frequency: ${trx.recurring.frequency}</p><p>Amount: ${formatCurrency(trx.recurring.amount)}</p><p>Remaining Payments: ${trx.recurring.remaining}</p></div>` : ''}
                </div>
                
                <div class="border-t border-gray-200 dark:border-gray-700 px-4 py-2 flex justify-between items-center bg-gray-50 dark:bg-gray-800 rounded-b-lg">
                    <button data-action="toggle-audit" class="text-sm font-semibold text-gray-600 dark:text-gray-400 hover:text-primary flex items-center">
                        Audit Log <i class="fa-solid fa-chevron-down audit-chevron ml-1.5 transition-transform"></i>
                    </button>
                    <button data-action="view-full-details" class="text-sm font-semibold text-primary hover:underline">
                        View Details
                    </button>
                </div>
                <div class="audit-log-container">
                    ${documentsHtml ? `<div class="p-4 bg-gray-50 dark:bg-gray-700/50 border-b border-gray-200 dark:border-gray-600 space-y-2"><h4 class="font-semibold text-sm mb-2">Associated Documents</h4>${documentsHtml}</div>` : ''}
                    <div class="timeline p-4 bg-gray-50 dark:bg-gray-700/50">
                        ${auditLogHtml || '<p class="text-sm text-center text-gray-500">No audit log events.</p>'}
                    </div>
                </div>
            </div>`;
        }).join('');
        
        if (transactions.length === 0) {
            transactionsHtml = `<div class="text-center py-8 text-gray-500 bg-white dark:bg-gray-800 rounded-lg">No transaction history found.</div>`;
        }

        return `
        <div class="space-y-6">
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${formatCurrency(lifetime)}</p><p class="text-sm text-gray-500 dark:text-gray-400">Lifetime Giving</p></div><i class="fa-solid fa-landmark text-3xl text-primary ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${formatCurrency(lastGift)}</p><p class="text-sm text-gray-500 dark:text-gray-400">Last Gift</p></div><i class="fa-solid fa-gift text-3xl text-green-500 ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${formatCurrency(largestGift)}</p><p class="text-sm text-gray-500 dark:text-gray-400">Largest Gift</p></div><i class="fa-solid fa-trophy text-3xl text-amber-500 ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${firstYear}</p><p class="text-sm text-gray-500 dark:text-gray-400">Giving Since</p></div><i class="fa-solid fa-calendar-days text-3xl text-blue-500 ml-4"></i></div>
            </div>
            <div class="space-y-4">
                 <div class="flex justify-between items-center"><h2 class="text-2xl font-bold">Pledge History</h2></div>
                <div class="space-y-4">${transactionsHtml}</div>
            </div>
        </div>`;
    },

    createCampaignTabHTML(data) {
        const formatCurrency = (amount) => (amount || 0).toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 });
        const campaignSummary = data.campaignSummary || [];
        const summaryHtml = campaignSummary.length > 0 ? campaignSummary.map(row => `
            <tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50">
                <td class="px-4 py-3 font-semibold">${row.campaign}</td>
                <td class="px-4 py-3 text-right">${formatCurrency(row.pledge)}</td>
                <td class="px-4 py-3 text-right">${formatCurrency(row.paid)}</td>
                <td class="px-4 py-3 text-right">${formatCurrency(row.balance)}</td>
                <td class="px-4 py-3 text-center">${row.designations}</td>
            </tr>
        `).join('') : `<tr><td colspan="5" class="text-center py-4 text-gray-500">No campaign summary available.</td></tr>`;

        return `
        <div class="space-y-6">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                 <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 flex flex-col h-[350px]">
                    <h3 class="text-lg font-semibold mb-4 flex-shrink-0">3-Year Giving History</h3>
                    <div class="relative flex-grow">
                        <canvas id="giving-history-chart"></canvas>
                    </div>
                </div>
                <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 flex flex-col h-[350px]">
                    <div class="flex justify-between items-center mb-4 flex-shrink-0">
                        <h3 class="text-lg font-semibold">Designations</h3>
                        <div class="flex items-center space-x-2 text-sm">
                            <span>Prior Year</span>
                            <label for="designation-toggle" class="relative inline-flex items-center cursor-pointer">
                                <input type="checkbox" value="" id="designation-toggle" class="sr-only peer">
                                <div class="w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
                            </label>
                            <span>Lifetime</span>
                        </div>
                    </div>
                    <div class="relative flex-grow min-h-0">
                        <canvas id="designation-chart"></canvas>
                    </div>
                </div>
            </div>
            <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-semibold mb-4">Campaign Summary</h3>
                <div class="overflow-x-auto">
                    <table class="min-w-full"><thead class="border-b border-gray-200 dark:border-gray-600"><tr><th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Campaign</th><th class="px-4 py-2 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Pledge</th><th class="px-4 py-2 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Paid</th><th class="px-4 py-2 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Balance</th><th class="px-4 py-2 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Designations</th></tr></thead>
                        <tbody class="divide-y divide-gray-200 dark:divide-gray-700">${summaryHtml}</tbody>
                    </table>
                </div>
            </div>
        </div>`;
    },

    createEngagementsTabHTML(data) {
        const engagements = data.engagements || { events: [], volunteering: [] };
        const totalEvents = engagements.events.filter(e => e.status === 'Attended').length;
        const totalOps = engagements.volunteering.length;
        const totalHours = engagements.volunteering.reduce((sum, op) => sum + (op.hours || 0), 0);
        const valueOfHours = (totalHours * 31.80);

        const eventListHtml = this.createEngagementListHTML(engagements.events, 'event');
        const volunteerListHtml = this.createEngagementListHTML(engagements.volunteering, 'volunteer');

        return `
        <div class="space-y-6">
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${totalEvents}</p><p class="text-sm text-gray-500 dark:text-gray-400">Events Attended</p></div><i class="fa-solid fa-calendar-check text-3xl text-blue-500 ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${totalOps}</p><p class="text-sm text-gray-500 dark:text-gray-400">Opportunities</p></div><i class="fa-solid fa-hands-helping text-3xl text-green-500 ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${totalHours}</p><p class="text-sm text-gray-500 dark:text-gray-400">Hours Volunteered</p></div><i class="fa-solid fa-clock text-3xl text-orange-500 ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${(valueOfHours || 0).toLocaleString('en-US', { style: 'currency', currency: 'USD', minimumFractionDigits: 0 })}</p><p class="text-sm text-gray-500 dark:text-gray-400">Value of Hours</p></div><i class="fa-solid fa-dollar-sign text-3xl text-primary ml-4"></i></div>
            </div>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Event Attendance</h3><div class="space-y-3">${eventListHtml}</div></div>
                <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Volunteer History</h3><div class="space-y-3">${volunteerListHtml}</div></div>
            </div>
        </div>`;
    },
    
    createCommunicationsTabHTML(data) {
        const comms = data.communications || { logs: [], notes: [], documents: [] };
        const commsLogsHtml = this.createCommLogHTML(comms.logs);
        const notesHtml = this.createNotesHTML(comms.notes);
        const docsHtml = this.createDocsHTML(comms.documents);

        return `
         <div class="space-y-6">
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${comms.logs.length}</p><p class="text-sm text-gray-500 dark:text-gray-400">Total Comms</p></div><i class="fa-solid fa-tower-broadcast text-3xl text-primary ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${comms.logs.filter(c => c.type === 'Email').length}</p><p class="text-sm text-gray-500 dark:text-gray-400">Emails</p></div><i class="fa-solid fa-envelope-open-text text-3xl text-blue-500 ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${comms.logs.filter(c => c.type === 'Phone Call').length}</p><p class="text-sm text-gray-500 dark:text-gray-400">Phone Calls</p></div><i class="fa-solid fa-phone-volume text-3xl text-green-500 ml-4"></i></div>
                <div class="stat-card"><div class="flex-1 text-center"><p class="text-3xl font-bold">${comms.logs.filter(c => c.type === 'Meeting').length}</p><p class="text-sm text-gray-500 dark:text-gray-400">Meetings</p></div><i class="fa-solid fa-users text-3xl text-orange-500 ml-4"></i></div>
            </div>
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div class="lg:col-span-2 bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700">
                    <h3 class="text-lg font-semibold mb-4">Communications Log</h3>
                    <div class="overflow-x-auto">
                        <table class="min-w-full"><thead class="border-b border-gray-200 dark:border-gray-600"><tr><th class="w-12"></th><th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Details</th><th class="px-4 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Sender</th><th class="px-4 py-2 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Date</th></tr></thead>
                            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">${commsLogsHtml}</tbody>
                        </table>
                    </div>
                </div>
                <div class="space-y-6">
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Notes</h3><div class="space-y-3">${notesHtml}</div></div>
                    <div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700"><h3 class="text-lg font-semibold mb-4">Documents</h3><div class="space-y-3">${docsHtml}</div></div>
                </div>
            </div>
        </div>`;
    },
    
    // --- SUB-COMPONENT HTML GENERATORS ---

    createEngagementListHTML(items, type) {
        if (!items || items.length === 0) {
            return `<div class="text-center py-8 text-gray-500">No ${type} history found.</div>`;
        }
        const statusStyles = { 'Attended': 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300', 'Completed': 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300', 'Registered': 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300', 'Scheduled': 'bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-300' };
        const iconInfo = { event: { icon: 'fa-ticket', bg: 'bg-purple-100 text-purple-600 dark:bg-purple-900/50 dark:text-purple-400' }, volunteer: { icon: 'fa-seedling', bg: 'bg-green-100 text-green-600 dark:bg-green-900/50 dark:text-green-400' }};
        return items.map(item => `
            <div class="flex items-center p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                <div class="flex-shrink-0 w-10 h-10 rounded-full ${iconInfo[type].bg} flex items-center justify-center"><i class="fa-solid ${iconInfo[type].icon}"></i></div>
                <div class="flex-grow ml-4">
                    <p class="font-semibold">${type === 'event' ? item.eventName : item.opportunityName}</p>
                    <p class="text-sm text-gray-500 dark:text-gray-400">${new Date(item.date).toLocaleDateString()}</p>
                </div>
                <div class="text-right flex-shrink-0 ml-2">
                     ${type === 'volunteer' && item.hours > 0 ? `<p class="font-semibold text-sm">${item.hours} Hours</p>` : ''}
                     <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusStyles[item.status] || ''}">${item.status}</span>
                </div>
            </div>`).join('');
    },

    createCommLogHTML(logs) {
        if (!logs || logs.length === 0) return `<tr><td colspan="4" class="text-center py-8 text-gray-500">No communication logs found.</td></tr>`;
        const logIconMap = { 'Email': 'fa-envelope', 'Phone Call': 'fa-phone', 'Meeting': 'fa-users' };
        const logBgMap = { 'Email': 'bg-blue-100 text-blue-600 dark:bg-blue-900/50 dark:text-blue-400', 'Phone Call': 'bg-green-100 text-green-600 dark:bg-green-900/50 dark:text-green-400', 'Meeting': 'bg-sky-100 text-sky-600 dark:bg-sky-900/50 dark:text-sky-400' };
        return logs.map(item => `
            <tr class="communication-item hover:bg-gray-50 dark:hover:bg-gray-700/50 cursor-pointer">
                <td class="px-4 py-3 align-top"><div class="w-8 h-8 rounded-full ${logBgMap[item.type]} flex items-center justify-center"><i class="fa-solid ${logIconMap[item.type]}"></i></div></td>
                <td class="px-4 py-3 align-top"><p class="font-semibold">${item.subject}</p><p class="text-sm text-gray-500 dark:text-gray-400">${item.type}</p></td>
                <td class="px-4 py-3 text-sm text-gray-500 dark:text-gray-400 align-top">${item.sender}</td>
                <td class="px-4 py-3 text-right text-sm text-gray-500 dark:text-gray-400 align-top">${new Date(item.date).toLocaleDateString()}</td>
                <div class="log-full-content hidden">${item.content}</div>
            </tr>`).join('');
    },

    createNotesHTML(notes) {
        if (!notes || notes.length === 0) return `<div class="text-center py-4 text-gray-500 text-sm">No notes found.</div>`;
        return notes.map(item => `
            <div class="note-item flex items-start p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg cursor-pointer">
                <div class="flex-shrink-0 w-8 h-8 rounded-full bg-yellow-100 text-yellow-600 dark:bg-yellow-900/50 dark:text-yellow-400 flex items-center justify-center mt-1"><i class="fa-solid fa-sticky-note"></i></div>
                <div class="flex-grow ml-3"><p class="font-semibold text-sm">${item.title}</p><p class="text-xs text-gray-500 dark:text-gray-400">${new Date(item.date).toLocaleDateString()}</p></div>
                <div class="log-full-content hidden">${item.content}</div>
            </div>`).join('');
    },
    
    createDocsHTML(documents) {
        if (!documents || documents.length === 0) return `<div class="text-center py-4 text-gray-500 text-sm">No documents found.</div>`;
        const docIconMap = { 'pdf': 'fa-file-pdf', 'ppt': 'fa-file-powerpoint', 'xls': 'fa-file-excel' };
        const docBgMap = { 'pdf': 'bg-red-100 text-red-600 dark:bg-red-900/50 dark:text-red-400', 'ppt': 'bg-orange-100 text-orange-600 dark:bg-orange-900/50 dark:text-orange-400', 'xls': 'bg-green-100 text-green-600 dark:bg-green-900/50 dark:text-green-400' };
        return documents.map(item => `
            <div class="flex items-start p-3 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                <div class="flex-shrink-0 w-8 h-8 rounded-full ${docBgMap[item.type]} flex items-center justify-center mt-1"><i class="fa-solid ${docIconMap[item.type]}"></i></div>
                <div class="flex-grow ml-3"><p class="font-semibold text-sm">${item.name}</p><p class="text-xs text-gray-500 dark:text-gray-400">Uploaded: ${new Date(item.date).toLocaleDateString()}</p></div>
                <a href="#" class="ml-2 text-gray-400 hover:text-primary"><i class="fa-solid fa-download"></i></a>
            </div>`).join('');
    },

    // --- CHARTING ---
    initGivingChart(canvas) {
        if (!canvas) return;
        const isDarkMode = this.state.isDarkMode;
        const gridColor = isDarkMode ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
        const labelColor = isDarkMode ? '#d1d5db' : '#4b5563';
        const primaryColor = getComputedStyle(document.body).getPropertyValue('--color-primary').trim();
        const gradient = canvas.getContext('2d').createLinearGradient(0, 0, 0, 200);
        gradient.addColorStop(0, `hsl(${primaryColor} / 0.8)`);
        gradient.addColorStop(1, `hsl(${primaryColor} / 0.5)`);
        this.charts.givingHistory = new Chart(canvas, { type: 'bar', data: { labels: ['2023', '2024', '2025'], datasets: [{ label: 'RUM', data: [800, 1000, 1000], backgroundColor: gradient, borderColor: `hsl(${primaryColor})`, borderWidth: 1, borderRadius: 4 }, { label: 'Other', data: [0, 0, 250], backgroundColor: 'hsl(220, 13%, 69% / 0.5)', borderColor: 'hsl(220, 13%, 69%)', borderWidth: 1, borderRadius: 4 }] }, options: { responsive: true, maintainAspectRatio: false, barPercentage: 0.5, categoryPercentage: 0.6, plugins: { legend: { display: false } }, scales: { y: { stacked: true, beginAtZero: true, ticks: { color: labelColor, callback: (value) => '$' + value / 1000 + 'k' }, grid: { color: gridColor } }, x: { stacked: true, ticks: { color: labelColor }, grid: { display: false } } } } });
    },

    initDesignationChart(canvas, dataType = 'priorYear') {
        if (!canvas) return;
        if(this.charts.designation) { this.charts.designation.destroy(); }
        const isDarkMode = this.state.isDarkMode;
        const labelColor = isDarkMode ? '#d1d5db' : '#4b5563';
        const primaryColor = getComputedStyle(document.body).getPropertyValue('--color-primary').trim();
        const backgroundColors = [ `hsl(${primaryColor} / 0.8)`, '#ef4444', '#f97316', '#22c55e', '#6b7280' ];
        const data = {
            priorYear: { labels: ['RUM', 'Anytown Food Bank'], data: [1000, 250] },
            lifetime: { labels: ['RUM', 'Anytown Food Bank', 'Community Shelter', 'Other'], data: [15000, 2250, 1500, 3650] }
        };
        this.charts.designation = new Chart(canvas, { type: 'doughnut', data: { labels: data[dataType].labels, datasets: [{ data: data[dataType].data, backgroundColor: backgroundColors, borderColor: isDarkMode ? '#1f2937' : '#fff', borderWidth: 2 }] }, options: { responsive: true, maintainAspectRatio: false, cutout: '70%', plugins: { legend: { position: 'right', labels: { color: labelColor, boxWidth: 12, padding: 20 } } } } });
    },

    // --- EVENT HANDLING ---
    addEventListeners() {
        this.elements.root.addEventListener('click', (e) => {
            const target = e.target;
            
            const clickedTab = target.closest('.profile-tab');
            if (clickedTab) {
                e.preventDefault();
                this.state.activeTab = clickedTab.dataset.tabId;
                this.renderLayout();
                return;
            }

            const viewDetailsButton = target.closest('[data-action="view-full-details"]');
            if (viewDetailsButton) {
                const card = viewDetailsButton.closest('[data-transaction-card]');
                const detailsData = JSON.parse(card.querySelector('.pledge-details-data').textContent);
                
                const modalHtml = this.createDetailsModalHtml(detailsData);
                const modalTitle = `Details for ${detailsData.campaign}`;

                if (typeof window.parent.showAppModal === 'function') {
                    window.parent.showAppModal(modalTitle, modalHtml);
                }
                return;
            }

             const auditToggle = target.closest('[data-action="toggle-audit"]');
            if (auditToggle) {
                const card = auditToggle.closest('[data-transaction-card]');
                const container = card?.querySelector('.audit-log-container');
                const chevron = auditToggle.querySelector('.audit-chevron');
                if (container) {
                    container.classList.toggle('open');
                    chevron.classList.toggle('rotated');
                }
                return;
            }

            const docLink = target.closest('.transaction-document-link');
            if(docLink) {
                e.preventDefault();
                const title = docLink.dataset.docTitle;
                const content = docLink.dataset.docContent;
                if(typeof window.parent.showAppModal === 'function') {
                    window.parent.showAppModal(title, `<p>${content}</p>`);
                }
                return;
            }

            const designationToggle = target.closest('#designation-toggle');
            if (designationToggle) {
                const canvas = this.elements.root.querySelector('#designation-chart');
                this.initDesignationChart(canvas, designationToggle.checked ? 'lifetime' : 'priorYear');
                return;
            }

            const designatedButton = target.closest('.designated-button');
            if (designatedButton) {
                const card = designatedButton.closest('[data-transaction-card]');
                const details = card?.querySelector('.designation-details');
                const title = `Designations for ${card?.querySelector('.text-md.font-semibold')?.textContent}`;
                if (details && typeof window.parent.showAppModal === 'function') {
                    window.parent.showAppModal(title, details.innerHTML);
                }
            }

            const recurringButton = target.closest('.recurring-button');
            if (recurringButton) {
                const card = recurringButton.closest('[data-transaction-card]');
                const details = card?.querySelector('.recurring-details');
                const title = `Recurring Payments for ${card?.querySelector('.text-md.font-semibold')?.textContent}`;
                 if (details && typeof window.parent.showAppModal === 'function') {
                    window.parent.showAppModal(title, details.innerHTML);
                }
            }
             
            const commItem = target.closest('.communication-item, .note-item');
            if (commItem) {
                const title = commItem.querySelector('.font-semibold').textContent;
                const content = commItem.querySelector('.log-full-content').innerHTML;
                if (typeof window.parent.showAppModal === 'function') {
                    window.parent.showAppModal(title, content);
                }
            }
        });
    },
};

document.addEventListener('DOMContentLoaded', () => {
    App.init();
});

